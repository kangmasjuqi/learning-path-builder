# .gitignore (Place this file in the root: learning-path-builder/)

# -----------------------------------------------------------
# Python (Backend: FastAPI, SQLAlchemy, Alembic)
# -----------------------------------------------------------

# Virtual environment
# This will ignore `venv/` if it's directly in the root, or in subdirectories
# Our current setup uses `venv/` inside `backend/`, which will be ignored.
venv/
.venv/
env/
.env/

# Byte-code files
*.pyc
__pycache__/
*.pyd
*.pyo

# C extensions
*.so

# Distribution / packaging
.Python
build/
dist/
*.egg-info/
.eggs/

# IDE specific files
# VS Code
.vscode/
# PyCharm / IntelliJ
.idea/
# Sublime Text
*.sublime-project
*.sublime-workspace

# Editor backup files
*~
*.bak
*.swp
*.swo

# Alembic specific (migration scripts themselves should be tracked)
# No specific ignores needed within `alembic/` generally, as `versions/` contains
# the tracked migration files.

# -----------------------------------------------------------
# Node.js (Frontend: Next.js, npm)
# -----------------------------------------------------------

# node_modules directory
node_modules/

# next.js build output
.next/
out/ # For static exports if used

# environment variables
.env.local
.env.development.local
.env.test.local
.env.production.local
.env.*.local # Catches any other local .env files

# npm debug logs
npm-debug.log
yarn-debug.log
yarn-error.log
.pnpm-debug.log*

# dependency lock files (choose one based on your package manager)
# If you use npm, keep package-lock.json and ignore yarn.lock, pnpm-lock.yaml
# If you use yarn, keep yarn.lock and ignore package-lock.json, pnpm-lock.yaml
# If you use pnpm, keep pnpm-lock.yaml and ignore package-lock.json, yarn.lock
package-lock.json # Keep if using npm
# yarn.lock
# pnpm-lock.yaml

# local user config (e.g. for editor)
.npm/

# macOS specific files
.DS_Store

# Windows specific files
Thumbs.db